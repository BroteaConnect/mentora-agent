{"version":3,"sources":["../src/actions/index.ts","../src/actions/getTalentScore.ts","../src/environment.ts","../src/templates.ts","../src/examples.ts","../src/services.ts","../src/index.ts"],"sourcesContent":["export * from \"./getTalentScore.ts\";\n","import { composeContext, elizaLogger } from \"@elizaos/core\";\nimport { generateMessageResponse } from \"@elizaos/core\";\nimport {\n    Action,\n    ActionExample,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n} from \"@elizaos/core\";\nimport { validateTalentScoreConfig } from \"../environment\";\nimport { getTalentScoreTemplate } from \"../templates\";\nimport { getTalentScoreExamples } from \"../examples\";\nimport { createTalentScoreService } from \"../services\";\n\nexport const getTalentScoreAction: Action = {\n    name: \"GET_TALENT_SCORE\",\n    similes: [\n        \"TALENT_SCORE\",\n        \"TALENT_SCORE_CHECK\",\n        \"TALENT_SCORE_REPORT\",\n        \"TALENT_SCORE_UPDATE\",\n        \"TALENT_SCORE_CHECK\",\n        \"TALENT_SCORE_OUTSIDE\",\n    ],\n    description: \"Get the talent score for a given wallet address\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateTalentScoreConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n        // Initialize/update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        }\n        state = await runtime.updateRecentMessageState(state);\n\n        // state -> context\n        const talentScoreContext = composeContext({\n            state,\n            template: getTalentScoreTemplate,\n        });\n\n        // context -> content\n        const content = await generateMessageResponse({\n            runtime,\n            context: talentScoreContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        elizaLogger.info(`Content: ${JSON.stringify(content)}`);\n\n        // parse content\n        const hasWalletAddress = content?.walletAddress && !content?.error;\n\n        if (!hasWalletAddress) {\n            return;\n        }\n\n        // Instantiate API service\n        const config = await validateTalentScoreConfig(runtime);\n        const apiKey = config.TALENT_PASSPORT_API_KEY;\n        const baseUrl = config.TALENT_PASSPORT_API_URL;\n        const talentScoreService = createTalentScoreService(apiKey, baseUrl);\n        // Fetch weather & respond\n        try {\n            elizaLogger.info(`Wallet address: ${content.walletAddress}`);\n\n            const passportData = await talentScoreService.getPassportInfo(\n                String(content?.walletAddress || \"\")\n            );\n            elizaLogger.success(\n                `Successfully fetched passport info for ${content.walletAddress}`\n            );\n\n            if (callback) {\n                callback({\n                    text: `The talent score for wallet ${content.walletAddress} is ${passportData.passport.score}. This score is based on ${passportData.passport.activity_score} activity stamps across various platforms and protocols.`,\n                    content: passportData,\n                });\n\n                return true;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in GET_TALENT_SCORE handler:\", error);\n\n            callback({\n                text: `Error fetching passport info: ${error.message}`,\n                content: { error: error.message },\n            });\n\n            return false;\n        }\n\n        return;\n    },\n    examples: getTalentScoreExamples as ActionExample[][],\n} as Action;\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const talentScoreEnvSchema = z.object({\n    TALENT_PASSPORT_API_KEY: z\n        .string()\n        .min(1, \"Talent Passport API key is required\"),\n    TALENT_PASSPORT_API_URL: z\n        .string()\n        .min(1, \"Talent Passport API URL is required\"),\n});\n\nexport type TalentScoreConfig = z.infer<typeof talentScoreEnvSchema>;\n\nexport async function validateTalentScoreConfig(\n    runtime: IAgentRuntime\n): Promise<TalentScoreConfig> {\n    try {\n        const config = {\n            TALENT_PASSPORT_API_KEY: runtime.getSetting(\n                \"TALENT_PASSPORT_API_KEY\"\n            ),\n            TALENT_PASSPORT_API_URL: runtime.getSetting(\n                \"TALENT_PASSPORT_API_URL\"\n            ),\n        };\n\n        return talentScoreEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Talent Passport configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","export const getTalentScoreTemplate = `Respond with a JSON object containing the talent score for the given wallet address.\nThe response must include:\n- score: A number between 0 and 300\n- walletAddress: The Ethereum wallet address being evaluated\n\nExample response:\n\\`\\`\\`json\n{\n    \"score\": 85,\n    \"walletAddress\": \"{{walletAddress}}\"\n}\n\\`\\`\\`\n{{recentMessages}}\nExtract the wallet address from the most recent message.\nRespond with a JSON markdown block containing both score and walletAddress.`;\n","import { ActionExample } from \"@elizaos/core\";\n\nexport const getTalentScoreExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's my talent score?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check your talent score.\",\n                action: \"GET_TALENT_SCORE\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Your talent score is 85/100. This score is based on your professional experience, skills, and community engagement.\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"How can I improve my talent score?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me analyze your current talent score components.\",\n                action: \"GET_TALENT_SCORE_DETAILS\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Based on your profile analysis, you can improve your talent score by: 1) Adding more details about your work experience, 2) Completing your skills section, and 3) Increasing your community participation through mentoring and collaboration.\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the average talent score in my industry?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the industry benchmarks for talent scores.\",\n                action: \"GET_INDUSTRY_TALENT_SCORE\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"In the software development industry, the average talent score is 78/100. You're performing above average compared to your peers.\",\n            },\n        },\n    ],\n];\n","import { elizaLogger } from \"@elizaos/core\";\nimport { PassportResponse } from \"./types\";\n\nexport const createTalentScoreService = (apiKey: string, baseUrl: string) => {\n    const getPassportInfo = async (\n        walletAddress: string\n    ): Promise<PassportResponse> => {\n        if (!apiKey || !walletAddress || !baseUrl) {\n            throw new Error(\"Invalid parameters\");\n        }\n\n        try {\n            const url = new URL(`${baseUrl}/passports/${walletAddress}`);\n\n            elizaLogger.info(\n                `Fetching passport info for wallet address: ${walletAddress}`\n            );\n            elizaLogger.info(`API key: ${apiKey}`);\n            elizaLogger.info(`URL: ${url}`);\n\n            const response = await fetch(url, {\n                headers: {\n                    \"X-API-KEY\": apiKey,\n                },\n            });\n\n            if (!response.ok) {\n                if (response.status === 404) {\n                    throw new Error(\n                        `No passport found for wallet address: ${walletAddress}`\n                    );\n                }\n                const error = await response.json();\n                throw new Error(error?.message || response.statusText);\n            }\n\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Talent Passport API Error:\", error.message);\n            throw error;\n        }\n    };\n\n    return { getPassportInfo };\n};\n","import { Plugin } from \"@elizaos/core\";\nimport { getTalentScoreAction } from \"./actions\";\n\nexport * as actions from \"./actions\";\n\nexport const talentScorePlugin: Plugin = {\n    name: \"talent-score\",\n    description: \"Talent Score plugin for Eliza\",\n    actions: [getTalentScoreAction],\n    evaluators: [],\n    providers: [],\n};\nexport default talentScorePlugin;\n"],"mappings":"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","names":["elizaLogger","elizaLogger"]}